{"name":"Html5.upload","tagline":"Html5 upload Project","body":"#Demo\r\n\r\n#Getting Started\r\n<div><pre>\r\n//Setting theupload options\r\nvar options = { ... }\r\n\r\n//Setting theimageUtility options( sample in this case )\r\nvar imageUtilityObj = { ... }\r\n\r\n//Assign the parameter and event setting to options then starting the plugin byself-invoking\r\nhtml5.upload(options)\r\n</pre></div>\r\n\r\n#Document\r\n###Parameter Setting\r\n<div><pre>\r\nuploadArea   //element of upload area Default: #uploadArea\r\n( setting the element name to upload area. )\r\n\r\nuploadButton   //element of upload button Default: #uploadButton\r\n( setting the element name to upload button. )\r\n\r\nuploadAbort   //element of upload abort Default: #uploadAbort\r\n( setting the element name to upload abort. )\r\n\r\nmimeTypes   //upload mime types Default: imageMime\r\n( select the mime types pattern or input mime types array directly. )\r\n( offer the imageMime, audioMime, videoMime, textMime types. )\r\n\r\nmimeStrict   //strict mime types Default: true\r\n( can upload or not in the uncatch mime types situation. )\r\n\r\nnumLimit   //number limit of each upload Default: 100\r\n( until exceeded limit, 0 is infinite number. )\r\n\r\nnumLimitTotal   //total number limit of upload Default: 0\r\n( until exceeded limit, 0 is infinite number. )\r\n\r\nsizeLimitUni   //limit the unit file size Default: 0\r\n( cancel the single upload request when a file size exceeded limit, 0 is infinite size. )\r\n\r\nsizeLimitSet   //limit a set of upload file size Default: 0\r\n( cancel the upload request when a set of file size exceeded limit, 0 is infinite size. )\r\n\r\nsizeLimitTotal   //limit the total uploaded size Default: 0\r\n( cancel the upload request when total file size exceeded limit, 0 is infinite size. )\r\n\r\nreadMethod   //setting the fileAPI reader method Default: readAsDataURL\r\n( including readAsText, readAsDataURL, readAsArrayBuffer, readAsBinaryString. )\r\n\r\najaxType   //setting the ajax request type Default: POST\r\n( HTTP request methods including get and post. )\r\n\r\najaxURL   //setting the ajax request url Default: ' '\r\n( HTTP request server address. )\r\n\r\najaxCache   //setting the ajax request cache Default: true\r\n( HTTP request ajax cache switch. )\r\n\r\najaxData   //setting the data object key of ajax request Default: ajaxData\r\n( HTTP request ajax data object key. )\r\n</pre></div>\r\n\r\n###Event Setting\r\n<div><pre>\r\ndragenter: function(e){}   //action of upload dragenter Default: {}\r\ndragover: function(e){}   //action of upload dragover Default: {}\r\ndragleave: function(e){}   //action of upload dragleave Default: {}\r\ndropdown: function(e){}   //action of upload dropdown Default: {}\r\nstartReader: function(e, file){}   //setting the fileAPI start event Default: {}\r\nprogressReader: function(e, file){}   //setting the fileAPI progress event Default: {}\r\nloadReader: function(e, file){}   //setting the fileAPI load event Default: {}\r\nendReader: function(e, file){}   //setting the fileAPI end event Default: {}\r\nabortReader: function(e, file){}   //setting the fileAPI abort event Default: {}\r\nstartXHR: function(e, file){}   //setting the ajaxXHR start event Default: {}\r\nprogressXHR: function(e, file){}   //setting the ajaxXHR progress event Default: {}\r\nloadXHR: function(e, file){}   //setting the ajaxXHR load event Default: {}\r\nendXHR: function(e, file){}   //setting the ajaxXHR end event Default: {}\r\nerrorXHR: function(e, file){}   //setting the ajaxXHR error event Default: {}\r\n</pre></div>\r\n\r\nHtml5 Upload\r\n=========\r\n\r\n### html5.upload project\r\n\r\n#### Describe\r\nThis is a plugin based on html5 fileAPI(FileReader) for file processing.\r\nimageUtility.js is a example for image processing.\r\n\r\n#### Type \r\nPlugin\r\n\r\n#### Feature \r\n1. All MIME types supported.\r\n2. Plug your own script to process file.\r\n\r\n#### Base on\r\nHTML5, Javascript, JQuery\r\n\r\n#### License\r\nunder the MIT License Copyright(c) 2014 Shawn Wu","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}